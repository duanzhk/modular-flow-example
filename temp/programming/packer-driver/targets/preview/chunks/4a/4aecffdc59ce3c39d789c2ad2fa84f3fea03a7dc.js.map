{"version":3,"sources":["file:///Users/dzk/Documents/git-projects/example-mflow/node_modules/dzkcc-mflow/dist/core/ServiceLocator.js"],"names":["ServiceLocator","regService","key","provider","services","set","factory","instance","getService","entry","get","Error","remove","delete","clear","Map"],"mappings":";;;MACMA,c;;;;AADN;gCACMA,c,GAAN,MAAMA,cAAN,CAAqB;AACA,eAAVC,UAAU,CAACC,GAAD,EAAMC,QAAN,EAAgB;AAC7B,cAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC;AACA,iBAAKC,QAAL,CAAcC,GAAd,CAAkBH,GAAlB,EAAuB;AAAEI,cAAAA,OAAO,EAAEH;AAAX,aAAvB;AACH,WAHD,MAIK;AACD;AACA,iBAAKC,QAAL,CAAcC,GAAd,CAAkBH,GAAlB,EAAuB;AAAEI,cAAAA,OAAO,EAAE,MAAMH,QAAjB;AAA2BI,cAAAA,QAAQ,EAAEJ;AAArC,aAAvB;AACH;AACJ;;AACgB,eAAVK,UAAU,CAACN,GAAD,EAAM;AACnB,cAAMO,KAAK,GAAG,KAAKL,QAAL,CAAcM,GAAd,CAAkBR,GAAlB,CAAd;AACA,cAAI,CAACO,KAAL,EACI,MAAM,IAAIE,KAAJ,cAAqBT,GAArB,sBAAN,CAHe,CAInB;;AACA,cAAIO,KAAK,CAACF,QAAV,EACI,OAAOE,KAAK,CAACF,QAAb,CANe,CAOnB;;AACA,cAAMA,QAAQ,GAAGE,KAAK,CAACH,OAAN,EAAjB;AACAG,UAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB,CATmB,CASQ;;AAC3B,iBAAOA,QAAP;AACH;;AACY,eAANK,MAAM,CAACV,GAAD,EAAM;AACf,eAAKE,QAAL,CAAcS,MAAd,CAAqBX,GAArB;AACH;;AACW,eAALY,KAAK,GAAG;AACX,eAAKV,QAAL,CAAcU,KAAd;AACH;;AA5BgB,O;;AA8BrBd,MAAAA,cAAc,CAACI,QAAf,GAA0B,IAAIW,GAAJ,EAA1B","sourcesContent":["//ServiceLocator：管理跨领域基础服务\r\nclass ServiceLocator {\r\n    static regService(key, provider) {\r\n        if (typeof provider === 'function') {\r\n            // 注册工厂函数（延迟执行）\r\n            this.services.set(key, { factory: provider });\r\n        }\r\n        else {\r\n            // 直接注册实例\r\n            this.services.set(key, { factory: () => provider, instance: provider });\r\n        }\r\n    }\r\n    static getService(key) {\r\n        const entry = this.services.get(key);\r\n        if (!entry)\r\n            throw new Error(`Service ${key} not registered!`);\r\n        // 单例模式：若已有实例，直接返回\r\n        if (entry.instance)\r\n            return entry.instance;\r\n        // 执行工厂函数，创建实例并缓存\r\n        const instance = entry.factory();\r\n        entry.instance = instance; // 缓存实例（单例）\r\n        return instance;\r\n    }\r\n    static remove(key) {\r\n        this.services.delete(key);\r\n    }\r\n    static clear() {\r\n        this.services.clear();\r\n    }\r\n}\r\nServiceLocator.services = new Map();\n\nexport { ServiceLocator };\n"]}