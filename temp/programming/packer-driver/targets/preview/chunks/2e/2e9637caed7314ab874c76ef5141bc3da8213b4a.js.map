{"version":3,"sources":["file:///Users/dzk/Documents/git-projects/example-mflow/node_modules/dzkcc-mflow/dist/utils/StringUtil.js"],"names":["StringUtil","ObjectUtil","guid","i","n","Math","floor","random","toString","numberTotPermil","value","toLocaleString","numberToThousand","fixed","k","sizes","log","r","pow","toFixed","numberToTenThousand","stringToArray1","str","split","stringToArray2","stringToArray3","stringToArray4","sub","showdot","replace","length","m","substr","stringLen","realLength","len","charCode","charCodeAt","ellipsisString","maxChars","isEmptyOrWhiteSpace","truncatedText","substring","trim","substitute","args","rest","parseByDic","isObjectLiteral","Array","placeholderRegex","match","key","placeholders","Map","matchAll","element","set","replacement","get","undefined","findAllSubstringsIndexes","mainStr","subStr","indexes","currentIndex","indexOf","push","surroundLTRWithUnicode","text","test","isDoubleWord","string"],"mappings":";;;kBAGMA,U;;;AAHGC,MAAAA,U,gBAAAA,U;;;AAET;4BACMD,U,GAAN,MAAMA,UAAN,CAAiB;AACb;AACW,eAAJE,IAAI,GAAG;AACV,cAAIA,IAAI,GAAG,EAAX;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,gBAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,EAAiCC,QAAjC,CAA0C,EAA1C,CAAR;AACAN,YAAAA,IAAI,IAAIE,CAAR;AACA,gBAAKD,CAAC,IAAI,CAAN,IAAaA,CAAC,IAAI,EAAlB,IAA0BA,CAAC,IAAI,EAA/B,IAAuCA,CAAC,IAAI,EAAhD,EACID,IAAI,IAAI,GAAR;AACP;;AACD,iBAAOA,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AAC0B,eAAfO,eAAe,CAACC,KAAD,EAAQ;AAC1B,iBAAOA,KAAK,CAACC,cAAN,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAC2B,eAAhBC,gBAAgB,CAACF,KAAD,EAAQG,KAAR,EAAmB;AAAA,cAAXA,KAAW;AAAXA,YAAAA,KAAW,GAAH,CAAG;AAAA;;AACtC,cAAIC,CAAC,GAAG,IAAR;AACA,cAAIC,KAAK,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,CAAZ;;AACA,cAAIL,KAAK,GAAGI,CAAZ,EAAe;AACX,mBAAOJ,KAAK,CAACF,QAAN,EAAP;AACH,WAFD,MAGK;AACD,gBAAIL,CAAC,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACW,GAAL,CAASN,KAAT,IAAkBL,IAAI,CAACW,GAAL,CAASF,CAAT,CAA7B,CAAR;AACA,gBAAIG,CAAC,GAAKP,KAAK,GAAGL,IAAI,CAACa,GAAL,CAASJ,CAAT,EAAYX,CAAZ,CAAlB;AACA,mBAAOc,CAAC,CAACE,OAAF,CAAUN,KAAV,IAAmBE,KAAK,CAACZ,CAAD,CAA/B;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAC8B,eAAnBiB,mBAAmB,CAACV,KAAD,EAAQG,KAAR,EAAmB;AAAA,cAAXA,KAAW;AAAXA,YAAAA,KAAW,GAAH,CAAG;AAAA;;AACzC,cAAIC,CAAC,GAAG,KAAR;AACA,cAAIC,KAAK,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAZ;;AACA,cAAIL,KAAK,GAAGI,CAAZ,EAAe;AACX,mBAAOJ,KAAK,CAACF,QAAN,EAAP;AACH,WAFD,MAGK;AACD,gBAAIL,CAAC,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACW,GAAL,CAASN,KAAT,IAAkBL,IAAI,CAACW,GAAL,CAASF,CAAT,CAA7B,CAAR;AACA,mBAAO,CAAEJ,KAAK,GAAGL,IAAI,CAACa,GAAL,CAASJ,CAAT,EAAYX,CAAZ,CAAV,EAA2BgB,OAA3B,CAAmCN,KAAnC,IAA4CE,KAAK,CAACZ,CAAD,CAAxD;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACyB,eAAdkB,cAAc,CAACC,GAAD,EAAM;AACvB,cAAIA,GAAG,IAAI,EAAX,EAAe;AACX,mBAAO,EAAP;AACH;;AACD,iBAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACyB,eAAdC,cAAc,CAACF,GAAD,EAAM;AACvB,cAAIA,GAAG,IAAI,EAAX,EAAe;AACX,mBAAO,EAAP;AACH;;AACD,iBAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACyB,eAAdE,cAAc,CAACH,GAAD,EAAM;AACvB,cAAIA,GAAG,IAAI,EAAX,EAAe;AACX,mBAAO,EAAP;AACH;;AACD,iBAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACyB,eAAdG,cAAc,CAACJ,GAAD,EAAM;AACvB,cAAIA,GAAG,IAAI,EAAX,EAAe;AACX,mBAAO,EAAP;AACH;;AACD,iBAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACc,eAAHI,GAAG,CAACL,GAAD,EAAMlB,CAAN,EAASwB,OAAT,EAA0B;AAAA,cAAjBA,OAAiB;AAAjBA,YAAAA,OAAiB,GAAP,KAAO;AAAA;;AAChC,cAAIX,CAAC,GAAG,eAAR;;AACA,cAAIK,GAAG,CAACO,OAAJ,CAAYZ,CAAZ,EAAe,IAAf,EAAqBa,MAArB,IAA+B1B,CAAnC,EAAsC;AAClC,mBAAOkB,GAAP;AACH;;AACD,cAAIS,CAAC,GAAG1B,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,CAAf,CAAR;;AACA,eAAK,IAAID,CAAC,GAAG4B,CAAb,EAAgB5B,CAAC,GAAGmB,GAAG,CAACQ,MAAxB,EAAgC3B,CAAC,EAAjC,EAAqC;AACjC,gBAAImB,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc7B,CAAd,EAAiB0B,OAAjB,CAAyBZ,CAAzB,EAA4B,IAA5B,EAAkCa,MAAlC,IAA4C1B,CAAhD,EAAmD;AAC/C,kBAAIwB,OAAJ,EAAa;AACT,uBAAON,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc7B,CAAd,IAAmB,KAA1B;AACH,eAFD,MAGK;AACD,uBAAOmB,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc7B,CAAd,CAAP;AACH;AACJ;AACJ;;AACD,iBAAOmB,GAAP;AACH;AACD;AACJ;AACA;AACA;;;AACoB,eAATW,SAAS,CAACX,GAAD,EAAM;AAClB,cAAIY,UAAU,GAAG,CAAjB;AAAA,cAAoBC,GAAG,GAAGb,GAAG,CAACQ,MAA9B;AAAA,cAAsCM,QAAQ,GAAG,CAAC,CAAlD;;AACA,eAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgC,GAApB,EAAyBhC,CAAC,EAA1B,EAA8B;AAC1BiC,YAAAA,QAAQ,GAAGd,GAAG,CAACe,UAAJ,CAAelC,CAAf,CAAX;AACA,gBAAIiC,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,GAAjC,EACIF,UAAU,IAAI,CAAd,CADJ,KAGIA,UAAU,IAAI,CAAd;AACP;;AACD,iBAAOA,UAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACyB,eAAdI,cAAc,CAAChB,GAAD,EAAMiB,QAAN,EAAgB;AACjC,cAAI,KAAKC,mBAAL,CAAyBlB,GAAzB,CAAJ,EACI,OAAO,EAAP;;AACJ,cAAIA,GAAG,CAACQ,MAAJ,GAAaS,QAAjB,EAA2B;AACvB,gBAAIE,aAAa,GAAGnB,GAAG,CAACoB,SAAJ,CAAc,CAAd,EAAiBH,QAAjB,CAApB;AACA,mBAAUE,aAAV;AACH,WAHD,MAIK;AACD,mBAAOnB,GAAP;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AAC8B,eAAnBkB,mBAAmB,CAAClB,GAAD,EAAM;AAC5B,iBAAO,CAACA,GAAD,IAAQA,GAAG,CAACqB,IAAJ,MAAc,EAA7B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACqB,eAAVC,UAAU,CAACtB,GAAD,EAAe;AAC5B,cAAIA,GAAG,IAAI,IAAX,EACI,OAAO,EAAP;AACJ,cAAIuB,IAAJ;;AAH4B,4CAANC,IAAM;AAANA,YAAAA,IAAM;AAAA;;AAI5B,cAAIC,UAAU,GAAGD,IAAI,CAAChB,MAAL,IAAe,CAAf,IAAoB7B,UAAU,CAAC+C,eAAX,CAA2BF,IAAI,CAAC,CAAD,CAA/B,CAArC;;AACA,cAAIC,UAAU,IAAKD,IAAI,CAAChB,MAAL,IAAe,CAAf,IAAoBgB,IAAI,CAAC,CAAD,CAAJ,YAAmBG,KAA1D,EAAkE;AAC9DJ,YAAAA,IAAI,GAAGC,IAAI,CAAC,CAAD,CAAX;AACH,WAFD,MAGK;AACDD,YAAAA,IAAI,GAAGC,IAAP;AACH,WAV2B,CAW5B;;;AACA,cAAMI,gBAAgB,GAAG,eAAzB;;AACA,cAAIH,UAAJ,EAAgB;AACZ,mBAAOzB,GAAG,CAACO,OAAJ,CAAYqB,gBAAZ,EAA8B,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACjD,qBAAOP,IAAI,CAACO,GAAD,CAAX;AACH,aAFM,CAAP;AAGH,WAJD,MAKK;AACD;AACA,gBAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;AACA,gBAAIH,KAAK,GAAG7B,GAAG,CAACiC,QAAJ,CAAaL,gBAAb,CAAZ;AACA,gBAAI/C,CAAC,GAAG,CAAR;;AACA,iBAAK,IAAMqD,OAAX,IAAsBL,KAAtB,EAA6B;AACzBE,cAAAA,YAAY,CAACI,GAAb,CAAiBD,OAAO,CAAC,CAAD,CAAxB,EAA6BX,IAAI,CAAC1C,CAAD,CAAjC;AACAA,cAAAA,CAAC;AACJ,aARA,CASD;;;AACA,mBAAOmB,GAAG,CAACO,OAAJ,CAAYqB,gBAAZ,EAA8B,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACjD,kBAAMM,WAAW,GAAGL,YAAY,CAACM,GAAb,CAAiBR,KAAjB,CAApB;AACA,qBAAOO,WAAW,KAAKE,SAAhB,GAA4BF,WAA5B,GAA0CP,KAAjD;AACH,aAHM,CAAP;AAIH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACmC,eAAxBU,wBAAwB,CAACC,OAAD,EAAUC,MAAV,EAAkB;AAC7C,cAAMC,OAAO,GAAG,EAAhB;AACA,cAAIC,YAAY,GAAGH,OAAO,CAACI,OAAR,CAAgBH,MAAhB,CAAnB;;AACA,iBAAOE,YAAY,KAAK,CAAC,CAAzB,EAA4B;AACxBD,YAAAA,OAAO,CAACG,IAAR,CAAaF,YAAb;AACAA,YAAAA,YAAY,GAAGH,OAAO,CAACI,OAAR,CAAgBH,MAAhB,EAAwBE,YAAY,GAAGF,MAAM,CAACjC,MAA9C,CAAf;AACH;;AACD,iBAAOkC,OAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACiC,eAAtBI,sBAAsB,CAACC,IAAD,EAAO;AAChC;AACA,iBAAOA,IAAI,CAACxC,OAAL,CAAa,gBAAb,EAAgCsB,KAAD,IAAW;AAC7C;AACA,gBAAI,WAAWmB,IAAX,CAAgBnB,KAAhB,CAAJ,EAA4B;AACxB,gCAAgBA,KAAhB;AACH;;AACD,mBAAOA,KAAP;AACH,WANM,CAAP;AAOH;AACD;AACJ;AACA;AACA;;;AACuB,eAAZoB,YAAY,CAACC,MAAD,EAAS;AACxB,iBAAO,eAAeF,IAAf,CAAoBE,MAApB,CAAP;AACH;;AAvPY,O","sourcesContent":["import { ObjectUtil } from './ObjectUtil.js';\n\n/** 字符串工具 */\r\nclass StringUtil {\r\n    /** 获取一个唯一标识的字符串 */\r\n    static guid() {\r\n        let guid = \"\";\r\n        for (let i = 1; i <= 32; i++) {\r\n            let n = Math.floor(Math.random() * 16.0).toString(16);\r\n            guid += n;\r\n            if ((i == 8) || (i == 12) || (i == 16) || (i == 20))\r\n                guid += \"-\";\r\n        }\r\n        return guid;\r\n    }\r\n    /**\r\n     * 转美式计数字符串\r\n     * @param value 数字\r\n     * @example\r\n     * 123456789 = 123,456,789\r\n     */\r\n    static numberTotPermil(value) {\r\n        return value.toLocaleString();\r\n    }\r\n    /**\r\n     * 转英文单位计数\r\n     * @param value 数字\r\n     * @param fixed 保留小数位数\r\n     * @example\r\n     * 12345 = 12.35K\r\n     */\r\n    static numberToThousand(value, fixed = 2) {\r\n        var k = 1000;\r\n        var sizes = ['', 'K', 'M', 'G'];\r\n        if (value < k) {\r\n            return value.toString();\r\n        }\r\n        else {\r\n            var i = Math.floor(Math.log(value) / Math.log(k));\r\n            var r = ((value / Math.pow(k, i)));\r\n            return r.toFixed(fixed) + sizes[i];\r\n        }\r\n    }\r\n    /**\r\n     * 转中文单位计数\r\n     * @param value 数字\r\n     * @param fixed 保留小数位数\r\n     * @example\r\n     * 12345 = 1.23万\r\n     */\r\n    static numberToTenThousand(value, fixed = 2) {\r\n        var k = 10000;\r\n        var sizes = ['', '万', '亿', '万亿'];\r\n        if (value < k) {\r\n            return value.toString();\r\n        }\r\n        else {\r\n            var i = Math.floor(Math.log(value) / Math.log(k));\r\n            return ((value / Math.pow(k, i))).toFixed(fixed) + sizes[i];\r\n        }\r\n    }\r\n    /**\r\n     * \",\" 分割字符串成数组\r\n     * @param str 字符串\r\n     */\r\n    static stringToArray1(str) {\r\n        if (str == \"\") {\r\n            return [];\r\n        }\r\n        return str.split(\",\");\r\n    }\r\n    /**\r\n     * \"|\" 分割字符串成数组\r\n     * @param str 字符串\r\n     */\r\n    static stringToArray2(str) {\r\n        if (str == \"\") {\r\n            return [];\r\n        }\r\n        return str.split(\"|\");\r\n    }\r\n    /**\r\n     * \":\" 分割字符串成数组\r\n     * @param str 字符串\r\n     */\r\n    static stringToArray3(str) {\r\n        if (str == \"\") {\r\n            return [];\r\n        }\r\n        return str.split(\":\");\r\n    }\r\n    /**\r\n     * \";\" 分割字符串成数组\r\n     * @param str 字符串\r\n     */\r\n    static stringToArray4(str) {\r\n        if (str == \"\") {\r\n            return [];\r\n        }\r\n        return str.split(\";\");\r\n    }\r\n    /**\r\n     * 字符串截取\r\n     * @param str     字符串\r\n     * @param n       截取长度\r\n     * @param showdot 是否把截取的部分用省略号代替\r\n     */\r\n    static sub(str, n, showdot = false) {\r\n        var r = /[^\\x00-\\xff]/g;\r\n        if (str.replace(r, \"mm\").length <= n) {\r\n            return str;\r\n        }\r\n        var m = Math.floor(n / 2);\r\n        for (var i = m; i < str.length; i++) {\r\n            if (str.substr(0, i).replace(r, \"mm\").length >= n) {\r\n                if (showdot) {\r\n                    return str.substr(0, i) + \"...\";\r\n                }\r\n                else {\r\n                    return str.substr(0, i);\r\n                }\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    /**\r\n     * 计算字符串长度，中文算两个字节\r\n     * @param str 字符串\r\n     */\r\n    static stringLen(str) {\r\n        var realLength = 0, len = str.length, charCode = -1;\r\n        for (var i = 0; i < len; i++) {\r\n            charCode = str.charCodeAt(i);\r\n            if (charCode >= 0 && charCode <= 128)\r\n                realLength += 1;\r\n            else\r\n                realLength += 2;\r\n        }\r\n        return realLength;\r\n    }\r\n    /**\r\n     * 截取字符串，显示省略号\r\n     * @param str\r\n     * @param len\r\n     */\r\n    static ellipsisString(str, maxChars) {\r\n        if (this.isEmptyOrWhiteSpace(str))\r\n            return \"\";\r\n        if (str.length > maxChars) {\r\n            let truncatedText = str.substring(0, maxChars);\r\n            return `${truncatedText}...`;\r\n        }\r\n        else {\r\n            return str;\r\n        }\r\n    }\r\n    /**\r\n     * 是否为空或者空格\r\n     * @param str\r\n     */\r\n    static isEmptyOrWhiteSpace(str) {\r\n        return !str || str.trim() == '';\r\n    }\r\n    /**\r\n     * 参数替换\r\n     * @param  str\r\n     * @param  rest\r\n     *\r\n     * @example\r\n     *\r\n     * var str:string = \"here is some info '{0}' and {1}\";\r\n     * StringUtil.substitute(str, 15.4, true);\r\n     * \"here is some info '15.4' and true\"\r\n     *\r\n     *  const result = substitute(\"Hello, {name}! Today is {day}.\", \"John Doe\", \"Monday\");\r\n     *  console.log(result); // 输出: Hello, John Doe! Today is Monday.\r\n     *\r\n     *  const result2 = substitute(\"The value of {abc} is {num} and the variable {xyz} has the value {value}.\", {abc: 123, num: \"456\", xyz: \"789\", value: \"hello\"});\r\n     *  console.log(result2); // 输出: The value of 123 is 456 and the variable 789 has the value hello.\r\n     */\r\n    static substitute(str, ...rest) {\r\n        if (str == null)\r\n            return '';\r\n        var args;\r\n        let parseByDic = rest.length == 1 && ObjectUtil.isObjectLiteral(rest[0]);\r\n        if (parseByDic || (rest.length == 1 && rest[0] instanceof Array)) {\r\n            args = rest[0];\r\n        }\r\n        else {\r\n            args = rest;\r\n        }\r\n        // 创建一个正则表达式来匹配所有的大括号占位符\r\n        const placeholderRegex = /\\{([\\w-]+)\\}/g;\r\n        if (parseByDic) {\r\n            return str.replace(placeholderRegex, (match, key) => {\r\n                return args[key];\r\n            });\r\n        }\r\n        else {\r\n            // 构建一个映射，将大括号中的内容映射到实际值\r\n            const placeholders = new Map();\r\n            let match = str.matchAll(placeholderRegex);\r\n            let i = 0;\r\n            for (const element of match) {\r\n                placeholders.set(element[0], args[i]);\r\n                i++;\r\n            }\r\n            // 使用映射替换占位符\r\n            return str.replace(placeholderRegex, (match, key) => {\r\n                const replacement = placeholders.get(match);\r\n                return replacement !== undefined ? replacement : match;\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 获取字符串中指定字符的全部索引\r\n     * @param mainStr\r\n     * @param subStr\r\n     * @returns\r\n     */\r\n    static findAllSubstringsIndexes(mainStr, subStr) {\r\n        const indexes = [];\r\n        let currentIndex = mainStr.indexOf(subStr);\r\n        while (currentIndex !== -1) {\r\n            indexes.push(currentIndex);\r\n            currentIndex = mainStr.indexOf(subStr, currentIndex + subStr.length);\r\n        }\r\n        return indexes;\r\n    }\r\n    /**\r\n     * 用于将英文文本包围在 Unicode RLE 和 PDF 字符中，以确保其在 RTL 文本中正确显示\r\n     * @param text\r\n     * @returns\r\n     */\r\n    static surroundLTRWithUnicode(text) {\r\n        // 使用正则表达式匹配连续的英文单词，并在其前后添加 \\u202B 和 \\u202C\r\n        return text.replace(/([a-zA-Z\\s]+)/g, (match) => {\r\n            // 检查匹配到的字符串是否包含英文字符\r\n            if (/[a-zA-Z]/.test(match)) {\r\n                return `\\u202B${match}\\u202C`;\r\n            }\r\n            return match;\r\n        });\r\n    }\r\n    /**\r\n     * 判断字符是否为双字节字符（如中文字符）\r\n     * @param string 原字符串\r\n     */\r\n    static isDoubleWord(string) {\r\n        return /[^\\x00-\\xff]/.test(string);\r\n    }\r\n}\n\nexport { StringUtil };\n"]}