{"version":3,"sources":["file:///Users/dzk/Documents/git-projects/example-mflow/node_modules/dzkcc-mflow/dist/core/Decorators.js"],"names":["getInterface","ctor","sym","interfaceSymbols","get","Error","name","manager","has","set","Symbol","managerRegistry","push","model","modelRegistry","autoRegister","core","forEach","console","log","regModel","regManager","CleanInjectedProperties","constructor","collectInjectedProperties","klass","Object","parentProperties","getPrototypeOf","currentProperties","Reflect","getMetadata","INJECTED_PROPERTIES_KEY","injectedProperties","Set","prop","hasOwnProperty","managedWithClean","decoratedCtor","injectManager","target","injectionKey","for","defineProperty","toString","ServiceLocator","getService","getManager","val","enumerable","configurable","includes","defineMetadata","Map"],"mappings":"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","sourcesContent":["import { ServiceLocator } from './ServiceLocator.js';\nimport 'reflect-metadata';\n\n// 通过symbol实现接口标识\r\nconst interfaceSymbols = new Map();\r\n// 装饰器，方便自动注册manager和model\r\nconst modelRegistry = [];\r\nconst managerRegistry = [];\r\nfunction getInterface(ctor) {\r\n    let sym = interfaceSymbols.get(ctor);\r\n    if (!sym)\r\n        throw new Error(`Manager ${ctor.name} not registered! Please use @manager() decorator to register it.`);\r\n    return sym;\r\n}\r\nfunction manager() {\r\n    return function (ctor) {\r\n        // 自动生成并注册Symbol\r\n        if (!interfaceSymbols.has(ctor)) {\r\n            interfaceSymbols.set(ctor, Symbol(ctor.name));\r\n        }\r\n        managerRegistry.push(ctor);\r\n    };\r\n}\r\nfunction model() {\r\n    return function (ctor) {\r\n        modelRegistry.push(ctor);\r\n    };\r\n}\r\nfunction autoRegister(core) {\r\n    modelRegistry.forEach(ctor => {\r\n        console.log(`${ctor.name} initialize`);\r\n        core.regModel(new ctor());\r\n    });\r\n    managerRegistry.forEach(ctor => {\r\n        console.log(`${ctor.name} initialize`);\r\n        core.regManager(new ctor());\r\n    });\r\n}\r\n// 依赖注入\r\n// ------------------------------------------------------------------------------------\r\nconst INJECTED_PROPERTIES_KEY = 'injectedProperties';\r\n// 因为明文定义的属性会覆盖injectManager（通过defineProperty定义）注入的属性，所以需要在编译时删除明文定义的属性\r\nfunction CleanInjectedProperties(constructor) {\r\n    return class extends constructor {\r\n        constructor(...args) {\r\n            super(...args);\r\n            // 递归收集当前类及其所有父类的注入属性\r\n            const collectInjectedProperties = (klass) => {\r\n                if (klass === null || klass === Object)\r\n                    return [];\r\n                const parentProperties = collectInjectedProperties(Object.getPrototypeOf(klass));\r\n                const currentProperties = Reflect.getMetadata(INJECTED_PROPERTIES_KEY, klass) || [];\r\n                // const currentProperties :any[] = []\r\n                return [...parentProperties, ...currentProperties];\r\n            };\r\n            // 合并并去重属性名\r\n            const injectedProperties = [\r\n                ...new Set(collectInjectedProperties(constructor))\r\n            ];\r\n            // 删除实例上的所有注入属性\r\n            injectedProperties.forEach(prop => {\r\n                if (this.hasOwnProperty(prop)) {\r\n                    delete this[prop];\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\nfunction managedWithClean() {\r\n    return function (ctor) {\r\n        // 先执行清理逻辑\r\n        const decoratedCtor = CleanInjectedProperties(ctor);\r\n        // 后执行注册逻辑\r\n        manager()(decoratedCtor);\r\n        return decoratedCtor;\r\n    };\r\n}\r\n// 懒加载依赖注入manager\r\nfunction injectManager(sym) {\r\n    return function (target, prop) {\r\n        const injectionKey = Symbol.for(prop);\r\n        Object.defineProperty(target, prop, {\r\n            get: function () {\r\n                console.log(`[属性访问] 触发getter：${injectionKey.toString()}`);\r\n                if (!this[injectionKey]) {\r\n                    this[injectionKey] = ServiceLocator.getService('core').getManager(sym);\r\n                }\r\n                return this[injectionKey];\r\n            },\r\n            set: function (val) {\r\n                throw new Error('InjectManager property is read-only');\r\n            },\r\n            enumerable: true,\r\n            configurable: false // 禁止修改属性描述符\r\n        });\r\n        // 2. 将属性名记录到元数据\r\n        const injectedProperties = Reflect.getMetadata(INJECTED_PROPERTIES_KEY, target.constructor) || [];\r\n        if (!injectedProperties.includes(prop)) {\r\n            injectedProperties.push(prop);\r\n        }\r\n        Reflect.defineMetadata(INJECTED_PROPERTIES_KEY, injectedProperties, target.constructor);\r\n    };\r\n}\n\nexport { autoRegister, getInterface, injectManager, managedWithClean, model };\n"]}