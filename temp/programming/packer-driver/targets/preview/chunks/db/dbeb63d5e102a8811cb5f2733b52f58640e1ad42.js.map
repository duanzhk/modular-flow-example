{"version":3,"sources":["file:///Users/dzk/Documents/git-projects/example-mflow/node_modules/dzkcc-mflow/dist/libs/Broadcaster.js"],"names":["Broadcaster","ObjectUtil","StringUtil","constructor","_persistBrodcastMap","_listenerHandlerMap","_stickBrodcastMap","_unuseHandlers","_recoverHandler","handler","listener","undefined","key","args","context","push","_checkListenerValidity","handlers","length","_addHandler","handlerMap","msgKey","stickyHandlers","removeStickyBroadcast","i","e","dispatch","data","callback","persistence","_runHandler","apply","_onHander","keyOrHandler","once","handlerObj","pop","isArray","on","off","Error","toString","index","findIndex","fastRemoveAt","offAll","processHandler","hasContext","shouldRemove","isGlobalClear","Object","keys","forEach","k","isEmptyOrWhiteSpace","console","warn","dispatchSticky","_a","_b","isRegistered","getPersistentValue","dispose"],"mappings":"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","sourcesContent":["import { ObjectUtil } from '../utils/ObjectUtil.js';\nimport { StringUtil } from '../utils/StringUtil.js';\n\nclass Broadcaster {\r\n    constructor() {\r\n        this._persistBrodcastMap = {};\r\n        this._listenerHandlerMap = {};\r\n        this._stickBrodcastMap = {};\r\n        this._unuseHandlers = [];\r\n    }\r\n    /**\r\n     * 回收handler\r\n     * @param handler\r\n     */\r\n    _recoverHandler(handler) {\r\n        if (!handler)\r\n            return;\r\n        //@ts-ignore\r\n        handler.listener = undefined;\r\n        handler.key = undefined;\r\n        handler.args = undefined;\r\n        handler.context = undefined;\r\n        this._unuseHandlers.push(handler);\r\n    }\r\n    //检查是否有有效的监听器，如果没有就删除这个key\r\n    _checkListenerValidity(key) {\r\n        if (!key)\r\n            return;\r\n        const handlers = this._listenerHandlerMap[key];\r\n        if (handlers && handlers.length > 0) {\r\n            return;\r\n        }\r\n        delete this._listenerHandlerMap[key];\r\n    }\r\n    /**\r\n     * 添加广播监听，如果有粘性广播就会执行粘性广播\r\n     * @param handler\r\n     */\r\n    _addHandler(handler) {\r\n        const handlerMap = this._listenerHandlerMap;\r\n        const msgKey = handler.key;\r\n        const handlers = handlerMap[msgKey] || [];\r\n        handlers.push(handler);\r\n        handlerMap[msgKey] = handlers;\r\n        //检查是否有粘性广播\r\n        const stickyHandlers = this._stickBrodcastMap[msgKey];\r\n        if (stickyHandlers) {\r\n            //需要把执行过的粘性广播删除，防止注册时再次执行\r\n            this.removeStickyBroadcast(msgKey);\r\n            for (let i = 0; i < stickyHandlers.length; i++) {\r\n                let e = stickyHandlers[i];\r\n                this.dispatch(msgKey, e.data, e.callback, e.persistence);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 将广播的数据作为参数，执行广播监听器的逻辑\r\n     * @param handler 广播监听器\r\n     * @param data 广播携带的数据\r\n     * @param callback 回调函数\r\n     */\r\n    _runHandler(handler, data, callback) {\r\n        if (!handler.listener)\r\n            return;\r\n        let args = [];\r\n        if (data) {\r\n            args.push(data);\r\n        }\r\n        if (callback) {\r\n            data.push(callback);\r\n        }\r\n        //如果有透传参数，则添加到参数列表中\r\n        if (handler.args && handler.args.length > 0) {\r\n            args.push(...handler.args);\r\n        }\r\n        return handler.listener.apply(handler.context, args);\r\n    }\r\n    _onHander(keyOrHandler, listener, context, once, args) {\r\n        if (typeof keyOrHandler === \"string\") {\r\n            if (!listener)\r\n                return;\r\n            let handlerObj = this._unuseHandlers.pop() || {};\r\n            handlerObj.key = keyOrHandler;\r\n            handlerObj.listener = listener;\r\n            handlerObj.context = context;\r\n            handlerObj.once = once;\r\n            handlerObj.args = args;\r\n            this._addHandler(handlerObj);\r\n        }\r\n        else {\r\n            if (ObjectUtil.isArray(keyOrHandler)) {\r\n                const handlers = keyOrHandler;\r\n                for (let i = 0; i < handlers.length; i++) {\r\n                    this._addHandler(handlers[i]);\r\n                }\r\n            }\r\n            else {\r\n                this._addHandler(keyOrHandler);\r\n            }\r\n        }\r\n    }\r\n    on(keyOrHandler, listener, context, args) {\r\n        this._onHander(keyOrHandler, listener, context, false, args);\r\n    }\r\n    once(keyOrHandler, listener, context, args) {\r\n        this._onHander(keyOrHandler, listener, context, true, args);\r\n    }\r\n    /**\r\n     * 注销指定监听\r\n     * @param key 事件名\r\n     * @param listener 监听回调\r\n     * @return this\r\n     */\r\n    off(key, listener) {\r\n        let handlers = this._listenerHandlerMap[key];\r\n        if (!handlers) {\r\n            throw new Error(`没有找到key为${key.toString()}的事件`);\r\n        }\r\n        const index = handlers.findIndex((handler) => handler.listener === listener);\r\n        const handler = handlers.fastRemoveAt(index);\r\n        this._recoverHandler(handler);\r\n        this._checkListenerValidity(key);\r\n        return this;\r\n    }\r\n    offAll(key, context) {\r\n        const handlerMap = this._listenerHandlerMap;\r\n        //指定key或全局清除\r\n        const processHandler = (handlers, msgKey, hasContext) => {\r\n            for (let i = handlers.length - 1; i >= 0; i--) {\r\n                const shouldRemove = !hasContext || handlers[i].context === context;\r\n                shouldRemove && this._recoverHandler(handlers.fastRemoveAt(i));\r\n            }\r\n            this._checkListenerValidity(msgKey);\r\n        };\r\n        if (key) { //清除指定key的所有监听\r\n            if (!handlerMap[key]) {\r\n                throw new Error(`没有找到key为${key.toString()}的事件`);\r\n            }\r\n            processHandler(handlerMap[key], key, false);\r\n        }\r\n        else { //处理全局或上下文清除\r\n            const isGlobalClear = !context;\r\n            Object.keys(handlerMap).forEach((msgKey) => {\r\n                const k = msgKey;\r\n                processHandler(handlerMap[k], k, !isGlobalClear);\r\n            });\r\n            isGlobalClear && (this._listenerHandlerMap = {});\r\n        }\r\n    }\r\n    /**\r\n     * 广播\r\n     *\r\n     * @param key 消息类型\r\n     * @param data 消息携带的数据\r\n     * @param callback\r\n     * @param persistence 是否持久化消息类型。持久化的消息可以在任意时刻通过 getPersistentValue(key) 获取最后一次被持久化的数据。\r\n     */\r\n    dispatch(key, data, callback, persistence) {\r\n        if (StringUtil.isEmptyOrWhiteSpace(key.toString())) {\r\n            throw new Error('广播的key不能为空');\r\n        }\r\n        //持久化\r\n        persistence !== null && persistence !== void 0 ? persistence : (this._persistBrodcastMap[key] = data);\r\n        const handlers = this._listenerHandlerMap[key];\r\n        if (!handlers || handlers.length == 0) {\r\n            console.warn(`没有注册广播：${key.toString()}`);\r\n            return;\r\n        }\r\n        for (let i = handlers.length - 1; i >= 0; i--) {\r\n            let handler = handlers[i];\r\n            this._runHandler(handler, data, callback);\r\n            if (handler.once) {\r\n                this.off(key, handler.listener);\r\n            }\r\n        }\r\n        this._checkListenerValidity(key);\r\n    }\r\n    /**\r\n     * 广播一条粘性消息。如果广播系统中没有注册该类型的接收者，本条信息将被滞留在系统中，否则等效dispatch方法。\r\n     * 可以使用removeStickyBroadcast移除存在的粘性广播。\r\n     *\r\n     * @param key 消息类型\r\n     * @param data 消息携带的数据\r\n     * @param callback\r\n     * @param persistence 是否持久化消息类型。持久化的消息可以在任意时刻通过 getPersistentValue(key) 获取最后一次被持久化的数据。\r\n     */\r\n    dispatchSticky(key, data, callback, persistence) {\r\n        var _a;\r\n        var _b;\r\n        if (StringUtil.isEmptyOrWhiteSpace(key.toString())) {\r\n            throw new Error('广播的key不能为空');\r\n        }\r\n        //如果已经有了监听者，则直接广播\r\n        if (this._listenerHandlerMap[key]) {\r\n            this.dispatch(key, data, callback, persistence);\r\n            return;\r\n        }\r\n        //注意：??= 在ES2021(TypeScript版本4.4)引入\r\n        ((_a = (_b = this._stickBrodcastMap)[key]) !== null && _a !== void 0 ? _a : (_b[key] = [])).push({\r\n            key: key,\r\n            data: data,\r\n            callback: callback,\r\n            persistence: persistence\r\n        });\r\n        //如果persistence=true需要先持久化，不能等到通过on->broadcast的时候再持久化。\r\n        //因为中途可能会有removeStickyBroadcast操作，那么on就不会调用broadcast，造成持久化无效bug。\r\n        persistence !== null && persistence !== void 0 ? persistence : (this._persistBrodcastMap[key] = data);\r\n    }\r\n    /**\r\n     * 移除指定的粘性广播\r\n     *\r\n     * @param key\r\n     */\r\n    removeStickyBroadcast(key) {\r\n        if (this._stickBrodcastMap[key]) {\r\n            delete this._stickBrodcastMap[key];\r\n        }\r\n    }\r\n    /**\r\n     * 事件注册是否被注册\r\n     * @param key\r\n     */\r\n    isRegistered(key) {\r\n        return !!this._listenerHandlerMap[key];\r\n    }\r\n    /**\r\n     * 获取被持久化的消息。ps:相同key的持久化广播会被覆盖。\r\n     * @param key\r\n     */\r\n    getPersistentValue(key) {\r\n        return this._persistBrodcastMap[key];\r\n    }\r\n    /**\r\n    * 销毁广播系统\r\n    */\r\n    dispose() {\r\n        //@ts-ignore\r\n        this._listenerHandlerMap = undefined;\r\n        //@ts-ignore\r\n        this._stickBrodcastMap = undefined;\r\n        //@ts-ignore\r\n        this._persistBrodcastMap = undefined;\r\n    }\r\n}\n\nexport { Broadcaster };\n"]}