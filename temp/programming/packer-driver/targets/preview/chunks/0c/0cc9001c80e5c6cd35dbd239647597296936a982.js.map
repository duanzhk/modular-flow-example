{"version":3,"sources":["file:///Users/dzk/Documents/git-projects/example-mflow/node_modules/dzkcc-mflow/dist/libs/BaseView.js"],"names":["BaseView","_decorator","Component","ccclass","property","constructor","arguments","__isIView__","__group__","undefined","_eventHandlers","_loaderHandlers","event","_eventProxy","Proxy","mf","get","target","prop","keyOrHandler","listener","context","args","handlers","Array","isArray","forEach","handler","push","key","Reflect","apply","res","_loaderProxy","startsWith","path","type","nameOrUrl","then","asset","onExit","off","onDestroy","release","getManager","ctor","core","getModel"],"mappings":"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","sourcesContent":["import { _decorator, Component } from 'cc';\n\nconst { ccclass, property } = _decorator;\r\nclass BaseView extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** @internal */\r\n        this.__isIView__ = true;\r\n        /** @internal */\r\n        this.__group__ = undefined;\r\n        this._eventHandlers = [];\r\n        this._loaderHandlers = [];\r\n    }\r\n    get event() {\r\n        if (!this._eventProxy) {\r\n            this._eventProxy = new Proxy(mf.event, {\r\n                get: (target, prop) => {\r\n                    if (prop === 'on' || prop === 'once') {\r\n                        return (keyOrHandler, listener, context, args) => {\r\n                            const handlers = Array.isArray(keyOrHandler) ? keyOrHandler : [keyOrHandler];\r\n                            handlers.forEach(handler => {\r\n                                if (typeof handler === 'object') {\r\n                                    this._eventHandlers.push({ key: handler.key, listener: handler.listener });\r\n                                }\r\n                                else {\r\n                                    this._eventHandlers.push({ key: keyOrHandler, listener: listener });\r\n                                }\r\n                            });\r\n                            return Reflect.get(target, prop).apply(target, [keyOrHandler, listener, context, args]);\r\n                        };\r\n                    }\r\n                    return Reflect.get(target, prop);\r\n                }\r\n            });\r\n        }\r\n        return this._eventProxy;\r\n    }\r\n    get res() {\r\n        if (!this._loaderProxy) {\r\n            this._loaderProxy = new Proxy(mf.res, {\r\n                get: (target, prop) => {\r\n                    //劫持所有load相关方法\r\n                    if (prop.startsWith('load')) {\r\n                        return (path, type, nameOrUrl) => {\r\n                            return Reflect.get(target, prop).apply(target, [path, type, nameOrUrl]).then((asset) => {\r\n                                this._loaderHandlers.push({ path, asset });\r\n                                return asset;\r\n                            });\r\n                        };\r\n                    }\r\n                    return Reflect.get(target, prop);\r\n                }\r\n            });\r\n        }\r\n        return this._loaderProxy;\r\n    }\r\n    onExit() {\r\n        // 自动清理所有事件监听\r\n        this._eventHandlers.forEach(({ key, listener }) => {\r\n            //@ts-ignore\r\n            mf.event.off(key, listener);\r\n        });\r\n        this._eventHandlers = [];\r\n    }\r\n    onDestroy() {\r\n        // 自动清理加载的资源\r\n        this._loaderHandlers.forEach(({ path, asset }) => {\r\n            mf.res.release(path, asset.constructor);\r\n            // mf.res.release(asset);\r\n        });\r\n        this._loaderHandlers = [];\r\n    }\r\n    getManager(ctor) {\r\n        // 业务组件避免直接依赖底层服务定位器，所以使用app.core统一对外接口，方便后续架构演进\r\n        return mf.core.getManager(ctor);\r\n    }\r\n    getModel(ctor) {\r\n        // 业务组件避免直接依赖底层服务定位器，所以使用app.core统一对外接口，方便后续架构演进\r\n        return mf.core.getModel(ctor);\r\n    }\r\n}\n\nexport { BaseView };\n"]}