{"version":3,"sources":["file:///Users/dzk/Documents/git-projects/example-mflow/node_modules/dzkcc-mflow/dist/core/Core.js"],"names":["Container","AbstractCore","AbstractManager","ServiceLocator","getInterface","constructor","ctor2ins","Map","symbol2ins","regByCtor","type","ins","set","getByCtor","get","Error","name","regBySymbol","ctor","sym","getBySymbol","toString","container","initialize","regModel","model","Object","getPrototypeOf","getModel","regManager","manager","getManager","indent","dispose","releaseEventManager","getService","getEventManager","eventManager","_a","_b","call","undefined"],"mappings":"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","sourcesContent":["import { ServiceLocator } from './ServiceLocator.js';\nimport { getInterface } from './Decorators.js';\n\nclass Container {\r\n    constructor() {\r\n        this.ctor2ins = new Map(); // 使用构造函数作为键\r\n        this.symbol2ins = new Map();\r\n    }\r\n    regByCtor(type, ins) {\r\n        this.ctor2ins.set(type, ins);\r\n    }\r\n    getByCtor(type) {\r\n        const ins = this.ctor2ins.get(type);\r\n        if (!ins)\r\n            throw new Error(`${type.name} not registered!`);\r\n        return ins;\r\n    }\r\n    regBySymbol(ctor, ins) {\r\n        const sym = getInterface(ctor);\r\n        this.symbol2ins.set(sym, ins);\r\n    }\r\n    getBySymbol(sym) {\r\n        const ins = this.symbol2ins.get(sym);\r\n        if (!ins)\r\n            throw new Error(`${sym.toString()} not registered!`);\r\n        return ins;\r\n    }\r\n}\r\nclass AbstractCore {\r\n    constructor() {\r\n        this.container = new Container();\r\n        this.initialize();\r\n    }\r\n    // 注册与获取模型\r\n    regModel(model) {\r\n        this.container.regByCtor(Object.getPrototypeOf(model).constructor, model);\r\n        model.initialize();\r\n    }\r\n    getModel(ctor) {\r\n        return this.container.getByCtor(ctor);\r\n    }\r\n    // 注册与获取管理器\r\n    regManager(manager) {\r\n        const ctor = Object.getPrototypeOf(manager).constructor;\r\n        this.container.regByCtor(ctor, manager);\r\n        this.container.regBySymbol(ctor, manager); // 同时注册Symbol\r\n        manager.initialize();\r\n    }\r\n    getManager(indent) {\r\n        if (typeof indent === 'symbol') {\r\n            return this.container.getBySymbol(indent);\r\n        }\r\n        else {\r\n            return this.container.getByCtor(indent);\r\n        }\r\n    }\r\n}\r\nclass AbstractManager {\r\n    dispose() {\r\n        this.releaseEventManager();\r\n    }\r\n    getModel(ctor) {\r\n        // 保持框架独立性，不与具体应用入口(app类)耦合\r\n        // 框架高内聚，使用ServiceLocator获取core\r\n        return ServiceLocator.getService('core').getModel(ctor);\r\n    }\r\n    // 事件管理器获取（通过服务定位器解耦）\r\n    getEventManager() {\r\n        if (!this.eventManager) {\r\n            this.eventManager = ServiceLocator.getService('EventManager');\r\n        }\r\n        return this.eventManager;\r\n    }\r\n    releaseEventManager() {\r\n        var _a, _b;\r\n        if (this.eventManager) {\r\n            // 假设 IEventManager 有销毁逻辑（如第三方库）\r\n            (_b = (_a = this.eventManager) === null || _a === void 0 ? void 0 : _a.dispose) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n            this.eventManager = undefined;\r\n        }\r\n    }\r\n}\n\nexport { AbstractCore, AbstractManager };\n"]}