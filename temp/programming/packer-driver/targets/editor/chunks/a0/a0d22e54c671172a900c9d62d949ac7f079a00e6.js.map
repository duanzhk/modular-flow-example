{"version":3,"sources":["file:///Users/dzk/Documents/git-projects/example-mflow/node_modules/dzkcc-mflow/dist/libs/ResLoader.js"],"names":["ResLoader","assetManager","Prefab","Asset","SpriteFrame","sp","__awaiter","DefaultBundle","loadAsset","path","type","nameOrUrl","assets","has","asset","get","Promise","resolve","reject","loadBundle","err","bundle","load","data","addRef","loadPrefab","loadSpriteFrame","ref","sf","isValid","spriteFrame","release","Error","loadSpine","spine","SkeletonData","skeletonData","pathOrAsset","getBundle","decRef","refCount","releaseAsset"],"mappings":"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","sourcesContent":["import { __awaiter } from '../_virtual/_tslib.js';\nimport { assetManager, Prefab, Asset, SpriteFrame, sp } from 'cc';\n\nconst DefaultBundle = \"resources\";\r\nclass ResLoader {\r\n    loadAsset(path, type, nameOrUrl = DefaultBundle) {\r\n        //TODO: bundle.release和assetManager.releaseAsset的区别?\r\n        if (assetManager.assets.has(path)) {\r\n            const asset = assetManager.assets.get(path);\r\n            return Promise.resolve(asset);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            assetManager.loadBundle(nameOrUrl, (err, bundle) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    bundle.load(path, type, (err, data) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        }\r\n                        else {\r\n                            data.addRef();\r\n                            resolve(data);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    loadPrefab(path, nameOrUrl = DefaultBundle) {\r\n        return this.loadAsset(path, Prefab, nameOrUrl);\r\n    }\r\n    loadSpriteFrame(ref, path, nameOrUrl = DefaultBundle) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const sf = yield this.loadAsset(path, SpriteFrame, nameOrUrl);\r\n            if (ref === null || ref === void 0 ? void 0 : ref.isValid) {\r\n                ref.spriteFrame = sf;\r\n                return Promise.resolve(sf);\r\n            }\r\n            else {\r\n                // 没有引用到的资源，释放掉\r\n                this.release(path, SpriteFrame, nameOrUrl);\r\n                return Promise.reject(new Error(\"Sprite is not valid\"));\r\n            }\r\n        });\r\n    }\r\n    loadSpine(ref, path, nameOrUrl = DefaultBundle) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const spine = yield this.loadAsset(path, sp.SkeletonData);\r\n            if (ref === null || ref === void 0 ? void 0 : ref.isValid) {\r\n                ref.skeletonData = spine;\r\n                return Promise.resolve(spine);\r\n            }\r\n            else {\r\n                // 没有引用到的资源，释放掉\r\n                this.release(path, sp.SkeletonData, nameOrUrl);\r\n                return Promise.reject(new Error(\"Spine is not valid\"));\r\n            }\r\n        });\r\n    }\r\n    release(pathOrAsset, type, nameOrUrl = DefaultBundle) {\r\n        if (typeof pathOrAsset === \"string\") {\r\n            const bundle = assetManager.getBundle(nameOrUrl);\r\n            const asset = bundle === null || bundle === void 0 ? void 0 : bundle.get(pathOrAsset, type);\r\n            asset === null || asset === void 0 ? void 0 : asset.decRef();\r\n            if ((asset === null || asset === void 0 ? void 0 : asset.refCount) === 0) {\r\n                bundle === null || bundle === void 0 ? void 0 : bundle.release(pathOrAsset, type);\r\n            }\r\n        }\r\n        else if (pathOrAsset instanceof Asset) {\r\n            pathOrAsset.decRef();\r\n            if (pathOrAsset.refCount === 0) {\r\n                assetManager.releaseAsset(pathOrAsset);\r\n            }\r\n        }\r\n    }\r\n}\n\nexport { ResLoader };\n"]}